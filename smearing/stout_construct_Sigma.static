static void construct_Sigma_V(stout_notes_tuple * const trace, gauge_field_t const V, gauge_field_t const smeared_force)
{
#pragma omp for
  for (unsigned int x = 0; x < VOLUME; ++x)
    for (unsigned int mu = 0; mu < 4; ++mu)
    {
      _su3d_times_su3(trace[x][mu].Sigma, V[x][mu], smeared_force[x][mu]);
    }
}

static void construct_Sigma_U(gauge_field_t Sigma, double const coeff, gauge_field_t const U, stout_notes_tuple * const trace)
{
  su3 ALIGN t1;
  su3 ALIGN t2;
  
  #pragma omp for private(t1, t2)
  for (unsigned int x = 0; x < VOLUME; ++x)
    for (unsigned int mu = 0; mu < 4; ++mu)
    {
      _su3_zero(Sigma[x][mu]);
      for (unsigned int nu = 0; nu < 4; ++nu)
      {
        if (mu == nu)
          continue;

        /* Prefetch the indices */
        int const xpm   = g_iup[x][mu];
        int const xmn   = g_idn[x][nu];
        int const xpn   = g_iup[x][nu];
        int const xpmmn = g_idn[xpm][nu];

        _su3d_times_su3(t1, U[xpn][mu], trace[x][nu].Z);   /* Line 1 */
        _su3_times_su3_acc(Sigma[x][mu], U[xpm][nu], t1);
        
        _su3_times_su3(t1, trace[xmn][mu].Z, U[xmn][nu]);  /* Line 2 */
        _su3d_times_su3_acc(Sigma[x][mu], U[xpmmn][nu], t1);
        
        _su3_times_su3d(t1, U[xpmmn][nu], U[x][mu]);            /* Line 3 */
        _su3_times_su3(t2, U[xmn][mu], t1);
        _su3_times_su3(t1, trace[xmn][nu].Z, t2);
        _su3d_times_su3(t2, U[x][mu], t1);
        _su3_refac_acc(Sigma[x][mu], -1.0, t2);
        
        _su3_times_su3d(t1, trace[xpm][nu].Z, U[x][mu]);   /* Line 4 */
        _su3_times_su3(t2, U[xpn][mu], t1);
        _su3_times_su3(t1,U[x][nu] , t2);
        _su3d_times_su3(t2, U[x][mu], t1);
        _su3_refac_acc(Sigma[x][mu], -1.0, t2);
        
        _su3_times_su3d(t1, trace[xpn][mu].Z, U[x][nu]);   /* Line 5 */
        _su3_times_su3_acc(Sigma[x][mu], U[xpm][nu], t1);
        
        _su3d_times_su3(t1, U[xmn][mu], U[xmn][nu]);            /* Line 6 */
        _su3_times_su3_acc(Sigma[x][mu], trace[xpmmn][nu].Z, t1);
    }
    _real_times_su3(Sigma[x][mu], coeff, Sigma[x][mu]);
  }
}