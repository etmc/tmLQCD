static void smear_first_stage(su3_two_index *out, double const coeff_1, gauge_field_t const orig)
{
  su3 tmp;
  su3 staples;

  double const coeff_principal = 1.0 - coeff_1;
  double const coeff_staples   = coeff_1 / 2.0;
  
  #define _HYP_SMEAR_COMPONENT(component, principal, via, x) \
  { \
    _su3_times_su3d(tmp, orig[g_iup[x][via]][principal], orig[g_iup[x][principal]][via]); \
    _su3_times_su3(staples, orig[x][via], tmp); \
    _su3_times_su3(tmp, orig[g_idn[x][via]][principal], orig[g_idn[g_iup[x][principal]][via]][via]); \
    _su3d_times_su3_acc(staples, orig[g_idn[x][via]][via], tmp); \
    _real_times_su3_plus_real_times_su3(out[x][component], coeff_principal, orig[x][principal], coeff_staples, staples) \
    reunitarize(&out[x][component]); \
  }

  for (int x = 0; x < VOLUME; ++x)
  {
    _HYP_SMEAR_COMPONENT(I2_0_12, 0, 3, x);  
    _HYP_SMEAR_COMPONENT(I2_0_13, 0, 2, x);
    _HYP_SMEAR_COMPONENT(I2_0_23, 0, 1, x);

    _HYP_SMEAR_COMPONENT(I2_1_02, 1, 3, x);
    _HYP_SMEAR_COMPONENT(I2_1_03, 1, 2, x);
    _HYP_SMEAR_COMPONENT(I2_1_23, 1, 0, x);

    _HYP_SMEAR_COMPONENT(I2_2_01, 2, 3, x);
    _HYP_SMEAR_COMPONENT(I2_2_03, 2, 1, x);
    _HYP_SMEAR_COMPONENT(I2_2_13, 2, 0, x);

    _HYP_SMEAR_COMPONENT(I2_3_01, 3, 2, x);
    _HYP_SMEAR_COMPONENT(I2_3_02, 3, 1, x);
    _HYP_SMEAR_COMPONENT(I2_3_12, 3, 0, x);
  }
  
  generic_exchange(out, sizeof(su3_two_index));
#undef _HYP_SMEAR_COMPONENT
}
