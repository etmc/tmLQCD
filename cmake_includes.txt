LIST(APPEND IO_SRC_C io_srcio/utils_write_inverter_info.c
io/gauge_read.c
io/utils_write_xlf.c
io/utils_construct_reader.c
io/params_construct_xlfInfo.c
io/utils_kill_with_error.c
io/DML_crc32.c
io/spinor_write_source_format.c
io/deri_write_stdout.c
io/spinor_write_propagator_format.c
io/utils_engineering.c
io/utils_parse_propagator_type.c
io/io_cm.c
io/utils_parse_ildgformat_xml.c
io/utils_read_message.c
io/utils_write_ildg_format.c
io/utils_destruct_writer.c
io/gauge_write.c
io/utils_write_message.c
io/params_construct_ildgFormat.c
io/spinor_read.c
io/utils_close_reader_record.c
io/spinor_read_binary.c
io/utils.c
io/spinor_write_stdout.c
io/spinor_write_info.c
io/utils_write_checksum.c
io/utils_write_header.c
io/eospinor_read.c
io/utils_write_first_message.c
io/params_construct_InverterInfo.c
io/utils_parse_checksum_xml.c
io/utils_construct_writer.c
io/sw_write_stdout.c
io/spinor_write_propagator_type.c
io/gauge_write_binary.c
io/spinor_write.c
io/utils_write_xlf_xml.c
io/params_construct_propagatorFormat.c
io/gauge_read_binary.c
io/dml.c
io/spinor_write_binary.c
io/utils_destruct_reader.c
io/utils_close_writer_record.c
io/eospinor_write.c
io/gauge_write_luscher_binary.c
io/params_construct_sourceFormat.c)

list(APPEND INIT_SRC_C init/init_dirac_halfspinor.c
     init/init_geometry_indices.c
     init/init_openmp.c
     init/init_gauge_field.c
     init/init_parallel.c
     init/init_chi_spinor_field.c
     init/init_gauge_fg.c
     init/init_spinor_field.c
     init/init_global_states.c
     init/init_bispinor_field.c
     init/init_gauge_tmp.c
     init/init_critical_globals.c
     init/init_omp_accumulators.c
     init/init_jacobi_field.c
     init/init_stout_smear_vars.c
     init/init_moment_field.c)

list(APPEND SOLVER_SRC_C
solver/bicg_complex.c
solver/dfl_projector.c
solver/eigenvalues_Jacobi.c
solver/gcr.c
solver/gmres_precon.c
solver/chrono_guess.c
solver/gcr4complex.c
solver/jdher.c
solver/gcr4complex_body.c
solver/gmres_dr.c
solver/fgmres4complex_body.c
solver/cg_her_bi.c
solver/solver_field.c
solver/quicksort.c
solver/bicgstab2.c
solver/cgs_real.c
solver/M_plus_block_psi_body.c
solver/little_mg_precon_body.c
solver/cg_her_su3vect.c
solver/little_project_eo_body.c
solver/monomial_solve.c
solver/cr.c
solver/gram-schmidt.c
solver/solver_types.c
solver/mode_number.c
solver/cg_her.c
solver/jdher_bi.c
solver/mrblk_body.c
solver/eigcg.c
solver/jdher_su3vect.c
solver/poly_precon.c
solver/Msap.c
solver/fgmres.c
solver/dirac_operator_eigenvectors.c
solver/incr_eigcg.c
solver/index_jd.c
solver/sumr.c
solver/cgne4complex.c
solver/eigenvalues_bi.c
solver/gmres.c
solver/lu_solve.c
solver/diagonalise_general_matrix.c
solver/mcr.c
solver/bicgstabell.c
solver/rg_mixed_cg_her.c
solver/mixed_cg_her.c
solver/mixed_cg_mms_tm_nd.c
solver/rg_mixed_cg_her_nd.c
solver/spectral_proj.c
solver/restart_X.c
solver/generate_dfl_subspace.c
solver/eigenvalues.c
solver/mcr4complex.c
solver/mr4complex.c
solver/bicgstab_complex.c
solver/cg_mms_tm_nd.c
solver/mr.c
solver/cg_her_nd.c
solver/bicgstab_complex_bi.c
solver/sub_low_ev.c
solver/ortho.c
solver/pcg_her.c
solver/fgmres4complex.c
solver/cg_mms_tm.c
solver/init_guess.c)

list(APPEND LINALG_SRC_C linalg/assign_mul_bra_add_mul_r.c
     linalg/mul_r_gamma5.c
     linalg/convert_eo_to_lexic.c
     linalg/print_spinor.c
     linalg/assign_add_mul_body.c
     linalg/mul_diff_mul_r.c
     linalg/square_norm_32.c
     linalg/mul.c
     linalg/mul_r.c
     linalg/mul_gamma5.c
     linalg/ratio.c
     linalg/square_norm.c
     linalg/mul_diff_mul.c
     linalg/square_and_minmax.c
     linalg/add.c
     linalg/assign_add_mul_add_mul_r.c
     linalg/comp_decomp.c
     linalg/mul_add_mul.c
     linalg/diff_32.c
     linalg/assign_add_mul.c
     linalg/addto_32.c
     linalg/assign_mul_add_mul_add_mul_add_mul_r.c
     linalg/assign_add_mul_r.c
     linalg/diff.c
     linalg/assign_mul_add_mul_r.c
     linalg/scalar_prod_r.c
     linalg/assign_to_32.c
     linalg/assign_add_mul_add_mul.c
     linalg/mul_diff_r.c
     linalg/assign_mul_add_r_and_square.c
     linalg/assign_mul_add_mul_r_32.c
     linalg/assign_mul_add_mul.c
     linalg/assign_mul_add_mul_add_mul_r.c
     linalg/scalar_prod_r_32.c
     linalg/assign_mul_add_r.c
     linalg/assign_mul_add_r_32.c
     linalg/scalar_prod_su3spinor.c
     linalg/convert_even_to_lexic.c
     linalg/mul_r_32.c
     linalg/assign_add_mul_r_add_mul.c
     linalg/convert_odd_to_lexic.c
     linalg/diff_and_square_norm.c
     linalg/scalar_prod_i.c
     linalg/mul_add_mul_r.c
     linalg/assign_diff_mul.c
     linalg/assign_mul_bra_add_mul_ket_add_r.c
     linalg/set_even_to_zero.c
     linalg/assign_mul_add.c
     linalg/square_and_prod_r.c
     linalg/scalar_prod_body.c
     linalg/assign_mul_bra_add_mul_ket_add.c
     linalg/assign_add_mul_r_32.c
     linalg/scalar_prod.c
     linalg/mattimesvec.c
     linalg/assign.c
     linalg/print_spinor_similar_components.c)

list(APPEND RATIONAL_SRC_C rational/zolotarev.c
     rational/rational.c
     rational/elliptic.c)

list(APPEND OPERATOR_SRC_C operator/clover_invert.c
     operator/hopping_body_dbl.c
     operator/tm_operators_nd_32.c
     operator/hopping_sse_dbl.c
     operator/halfspinor_body.c
     operator/Block_D_psi_body.c
     operator/mul_one_pm_imu_sub_mul_body.c
     operator/assign_mul_one_sw_pm_imu_site_lexic_body.c
     operator/assign_mul_one_sw_pm_imu_inv_block_body.c
     operator/clover_accumulate_deriv.c
     operator/Hopping_Matrix.c
     operator/hopping_bg_dbl.c
     operator/tm_operators.c
     operator/tm_times_Hopping_Matrix.c
     operator/clovertm_operators_32.c
     operator/hopping_sgl.c
     operator/Dov_proj.c
     operator/clover_deriv.c
     operator/halfspinor_bg_dbl.c
     operator/clover_det.c
     operator/clover_leaf.c
     operator/D_psi_body.c
     operator/clovertm_operators.c
     operator/hopping_sse_sgl.c
     operator/halfspinor_sse_dbl.c
     operator/Dov_psi.c
     operator/tm_operators_nd.c
     operator/tm_sub_Hopping_Matrix.c
     operator/Hopping_Matrix_nocom.c
     operator/clover_term.c
     operator/halfspinor_bgq_dbl.c
     operator/Hopping_Matrix_32_nocom.c
     operator/D_psi.c
     operator/tm_operators_32.c
     operator/Hopping_Matrix_32.c
     operator/halfspinor_body_32.c
     operator/mul_one_pm_imu_inv_body.c)

list(APPEND SMEARING_SRC_C smearing/hex_stout_exclude_two.c
     smearing/hex_hex_smear.c
     smearing/utils_print_su3.c
     smearing/hyp_APE_project_exclude_none.c
     smearing/hyp_hyp_staples_exclude_one.c
     smearing/hyp_APE_project_exclude_one.c
     smearing/hex_stout_exclude_one.c
     smearing/hyp_hyp_staples_exclude_two.c
     smearing/hex_stout_exclude_none.c
     smearing/stout_stout_smear.c
     smearing/hyp_hyp_smear.c
     smearing/hyp_APE_project_exclude_two.c
     smearing/utils_project_herm.c
     smearing/utils_reunitarize.c
     smearing/utils_generic_staples.c
     smearing/hyp_hyp_staples_exclude_none.c
     smearing/ape_ape_smear.c
     smearing/uils_print_config_to_screen.c
     smearing/utils_project_antiherm.c
     smearing/utils_print_config_to_screen.c
     smearing/utils_reunitarize_MILC.c)

list(APPEND BUFFER_SRC_C
     buffers/gauge_return_gauge_field.c
     buffers/gauge_get_gauge_field.c
     buffers/gauge_finalize_gauge_buffers.c
     buffers/gauge_initialize_gauge_buffers.c
     buffers/gauge.c
     buffers/gauge_free_unused_gauge_buffers.c
     buffers/gauge_get_gauge_field_array.c
     buffers/utils_generic_exchange.c
     buffers/gauge_allocate_gauge_buffers.c
     buffers/gauge_return_gauge_field_array.c)

list(APPEND MONOMIAL_SRC_C
     monomial/detratio_monomial.c
     monomial/sf_gauge_monomial.c
     monomial/poly_monomial.c
     monomial/cloverdetratio_monomial.c
     monomial/ndrat_monomial.c
     monomial/cloverdet_monomial.c
     monomial/clover_trlog_monomial.c
     monomial/cloverndpoly_monomial.c
     monomial/monitor_forces.c
     monomial/ndpoly_monomial.c
     monomial/det_monomial.c
     monomial/monomial.c
     monomial/cloverdetratio_rwmonomial.c
     monomial/gauge_monomial.c
     monomial/clovernd_trlog_monomial.c
     monomial/ratcor_monomial.c
     monomial/nddetratio_monomial.c
     monomial/rat_monomial.c
     monomial/ndratcor_monomial.c
     monomial/moment_energy.c)

list(APPEND XCHANGE_SRC_C xchange/xchange_lexicfield.c
xchange/xchange_2fields.c
xchange/xchange_gauge.c
xchange/xchange_halffield.c
xchange/xchange_jacobi.c
xchange/little_field_gather_body.c
xchange/little_field_gather.c
xchange/xchange_deri.c
xchange/xchange_field.c
xchange/xchange_field_tslice.c)

list(MEAS_SRC_C
meas/pion_norm.c
meas/correlators.c
meas/polyakov_loop.c
meas/measurements.c
meas/oriented_plaquettes.c
meas/gradient_flow.c
meas/measure_clover_field_strength_observables.c)

list(APPEND SF_SRC_C sf/sf_calc_action.c
     sf/sf_get_rectangle_staples.c
     sf/sf_get_staples.c
     sf/sf_observables.c
     sf/sf_utils.c
     )

list(APPEND MAIN_SRC_C
measure_gauge_action.c
start.c
deriv_Sb.c
reweighting_factor_nd.c
ranlxs.c
source_generation.c
read_input.c
invert_doublet_eo.c
geometry_eo.c
getopt.c
offline_measurement.c
tm_debug_printf.c
chebyshev_polynomial_nd.c
invert_eo.c
little_D.c
get_rectangle_staples.c
gen_sources.c
rnd_gauge_trafo.c
test_lemon.c
LapH_ev.c
benchmark.c
measure_rectangles.c
check_locallity.c
invert.c
deriv_Sb_D_psi.c
deriv_mg_tune.c
mpi_init.c
update_momenta_fg.c
gamma.c
matrix_utils.c
reweighting_factor.c
update_tm.c
jacobi.c
invert_overlap.c
phmc.c
get_staples.c
clenshaw_coef.c
block.c
spinor_fft.c
boundary.c
little_D_body.c
X_psi.c
prepare_source.c
DDalphaAMG_interface.c
update_backward_gauge.c
invert_clover_eo.c
gettime.c
hmc_tm.c
update_momenta.c
sighandler.c
compare_derivative.c
ranlxd.c
DirectPut.c
aligned_malloc.c
fatal_error.c
operator.c
cu/cu.c
chebyshev_polynomial.c
qphix_test_Dslash.c
expo.c
overrelaxation.c
Ptilde_nd.c
update_gauge.c
hopping_test.c
integrator.c
P_M_eta.c)

if (TMLQCD_USE_QPHIX)
list(APPEND MAIN_SRC_C qphix_interface.cpp)
endif()

if (TMLQCD_USE_QUDA)
list(APPEND MAIN_SRC_C quda_interface.c)
endif()

list(APPEND ALL_SRC ${MAIN_SRC_C} ${SF_SRC_C} ${XCHANGE_SRC_C} ${MONOMIAL_SRC_C} ${BUFFER_SRC_C} ${SMEARING_SRC_C} ${OPERATOR_SRC_C} ${RATIONAL_SRC_C} ${LINALG_SRC_C} ${IO_SRC_C} ${INIT_SRC_C} ${SOLVER_SRC_C})

# cmake 4.0 uses a different syntax for the option
flex_target(tmlqcd_input_read input_read.l input_read.c
            $<$<VERSION_LESS:${CMAKE_MAJOR_VERSION},4>:COMPILE_FLAGS "-Ca -Ptmlqcd">
            $<$<VERSION_GREATER_EQUAL:${CMAKE_MAJOR_VERSION},4>:OPTIONS "-Ca;-Ptmlqcd">)

# create a target library with namespacing because cmake does not know name space at all
add_library(tmlqcd::hmc ALL_SRC ${FLEX_tmlqcd_input_read_OUTPUTS})
set_target_properties(tmlqcd::hmc PROPERTIES VERSION ${PROJECT_VERSION} SOVERSION 1)

# define a library
target_link_libraries(tmlqcd::hmc
                      $<$<BOOL:${HAVE_CLOCK_GETTIME_IN_RT}>:rt>
                      $<$<BOOL:${TMLQCD_USE_LIME}>:tmlqcd::lime>
                      $<$<BOOL:${TMLQCD_USE_LEMON}>:tmlqcd::lemon>
                      $<$<BOOL:${TMLQCD_USE_QPHIX}>:tmlqcd::qphix>
                      $<$<BOOL:${TMLQCD_USE_FFTW}>:tmlqcd::fftw3>
                      $<$<BOOL:${TMLQCD_USE_MPI}>:MPI::MPI_C MPI::MPI_CXX>
                      $<$<BOOL:${TMLQCD_USE_QUDA}>:quda::quda>
                      $<$<BOOL:${TMLQCD_USE_CUDA}>:CUDA::cufft CUDA::cufftw CUDA::cublas CUDA::cudart CUDA::cuda_driver>
                      $<$<BOOL:${TMLQCD_USE_HIP}>:hip::hipfft roc::hipblas hip::host>
                      ${LAPACK_LIBRARIES}
                      ${BLAS_LIBRARIES}
                      OpenMP::OpenMP_C
                      OpenMP::OpenMP_CXX
                      m)

target_compile_definitions(tmlqcd::hmc
                           $<$<BOOL:${TMLQCD_USE_MPI}>:TM_USE_MPI>
                           # We are on a CRAY
                           $<$<BOOL:${TMLQCD_USE_CRAY}>:CRAY>
                           # lapack available
                           $<$<BOOL:${TMLQCD_USE_LAPACK}>:HAVE_LAPACK>
                           # Define to 1 if you have the `lime' library (-llime).
                           $<$<BOOL:${TMLQCD_USE_LIME}>:HAVE_LIBLIME>
                           # Define to 1 if you have the `lemon' library (-llemon).
                           $<$<BOOL:${TMLQCD_USE_LEMON}>:HAVE_LIBLEMON>
                           # 1 if clock_gettime is available for use in benchmark
                           $<$<OR:$<BOOL:${HAVE_CLOCK_GETTIME}>,$<BOOL:${HAVE_CLOCK_GETTIME_IN_RT}>>:HAVE_CLOCK_GETTIME>
                           $<$<BOOL:${TMLQCD_USE_OPENMP}>:TM_USE_OMP>
                           # Compile with FFTW support
                           $<$<BOOL:${TMLQCD_USE_FFTW}>:HAVE_FFTW>
                           # Use Opteron instructions
                           $<$<BOOL:${TMLQCD_USE_OPTERON}>:OPTERON>
                           # Use Pentium4 instructions
                           $<$<BOOL:${TMLQCD_USE_P4}>:P4>
                           # Define to the address where bug reports for this package should be sent.
                           TMLQCD_PACKAGE_BUGREPORT="curbach@gmx.de"
                           TMLQCD_PACKAGE_STRING="tmLQCD 5.2.0"
                           PACKAGE_TARNAME="tmlqcd"
                           TMLQCD_PACKAGE_VERSION=${PROJECT_VERSION}
                           # Index independent addressing
                           $<$<BOOL:${TMLQCD_USE_INDEX_INDEP_GEOMETRY}>:_INDEX_INDEP_GEOM>
                           # X parallelisation
                           $<$<EQUAL:${TMLQCD_MPI_DIMENSION},1>:PARALLELT>
                           # XY parallelisation
                           $<$<EQUAL:${TMLQCD_MPI_DIMENSION},2>:PARALLELXT>
                           # XYZ parallelisation
                           $<$<EQUAL:${TMLQCD_MPI_DIMENSION},3>:PARALLELXYT>
                           # timeslice-splitted communications
                           $<$<EQUAL:${TMLQCD_MPI_DIMENSION},4>:PARALLELXYZT>
                           # X parallelisation
                           $<$<STREQUAL:${TMLQCD_MPI_DIMENSION},"X"">:PARALLELX>
                           # XY parallelisation
                           $<$<STREQUAL:${TMLQCD_MPI_DIMENSION},"XY">:PARALLELXY>
                           # XYZ parallelisation
                           $<$<STREQUAL:${TMLQCD_MPI_DIMENSION},"XYZ">:PARALLELXYZ>
                           # timeslice-splitted communications
                           $<$<STREQUAL:${TMLQCD_MPI_DIMENSION},"XYZT">:PARALLELXYZT>
                           # #undef _USE_TSPLITPAR

                           $<$<BOOL:${TMLQCD_USE_TSPLITPAR}>:_USE_TSPLITPAR>
                           # Fixed volume at compiletime
                           $<$<BOOL:${TMLQCD_FIX_VOLUME}>:FIX_VOLUME>
                           # Define to 1 if fseeko (and presumably ftello) exists and is declared.
                           $<$<BOOL:${TMLQCD_HAVE_FSEEKO}>:HAVE_FSEEKO>
                           # Alignment for arrays -- necessary for SSE and automated vectorization
                           #define ALIGN_BASE 0x00
                           $<$<BOOL:${TMLQCD_USE_ALIGN_BASE}>:"ALIGN_BASE=0x00">
                           # Alignment compiler hint macro
                           #define ALIGN #
                           <$<BOOL:${TMLQCD_USE_ALIGN}>:ALIGN=\"#\">
                           # Alignment for 32bit arrays -- necessary for SSE and automated vectorization
                           #define ALIGN_BASE32 0x00
                           $<$<BOOL:${TMLQCD_USE_ALIGN_BASE32}>:"ALIGN_BASE32=0x00">
                           #define ALIGN32 #
                           <$<BOOL:${TMLQCD_USE_ALIGN32}>:ALIGN32=\"#\">
                           $<$<BOOL:${TMLQCD_USE_SSE2}>:SSE2>
                           $<$<BOOL:${TMLQCD_USE_SSE3}>:SSE3>
                           $<$<BOOL:${TMLQCD_USE_BGL}>:BGL>
                           $<$<BOOL:${TMLQCD_USE_BGP}>:BGP>
                           $<$<BOOL:${TMLQCD_USE_BGQ}>:BGQ>
                           $<$<BOOL:${TMLQCD_USE_SPI}>:SPI>
                           # Are we using the IBM xlc compiler?
                           # $<$<COMPILER_ID:"XLC">:XLC>
                           $<$<BOOL:${TMLQCD_USE_GAUGE_COPY}>: _GAUGE_COPY>
                           # #undef _LARGEFILE_SOURCE
                            # #undef _LARGE_FILES
                           #define _x86_64 1
                           $<$<BOOL:${TMLQCD_USE_HALF_SPINOR}>:_USE_HALFSPINOR>
                           $<$<BOOL:${TMLQCD_USE_SHMEM}>:_USE_SHMEM>
                           $<$<BOOL:${TMLQCD_USE_KOJAK}>:_KOJAK_INST>
                           $<$<BOOL:${TMLQCD_PERSISTENT_MPI}>:_PERSISTENT>
                           $<$<BOOL:${TMLQCD_NONBLOCKING_MPI}>:_NON_BLOCKING>
                           $<$<BOOL:${TMLQCD_USE_LAPH}>:WITHLAPH>
                           $<$<BOOL:${TMLQCD_USE_QUDA}>:TM_USE_QUDA>
                           $<$<BOOL:${TMLQCD_QUDA_EXPERIMENTAL}>:TM_QUDA_EXPERIMENTAL>
                           $<$<BOOL:${TMLQCD_QUDA_FERMIONIC_FORCES}>:TM_QUDA_FERMIONIC_FORCES>
                           $<$<BOOL:${TMLQCD_USE_DDALPHAAMG}>:DDalphaAMG>
                           $<$<BOOL:${TMLQCD_QPHIX}>:TM_USE_QPHIX>
                           $<$<BOOL:${QPHIX_SOALEN}>:QPHIX_SOALEN>
                           $<$<BOOL:${TMLQCD_USE_HIP}>:${TMLQCD_GPU_PLATFORM_DFLAGS}>
                           )

target_include_directories(tmlqcd::hmc PUBLIC $<INSTALL_INTERFACE:include>
                           PRIVATE "init io linalg meas monomial operator profiling rational sf smearing solver util xchange wrapper")
